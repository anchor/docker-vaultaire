#!/bin/sh
set -x
set -e

#
# Copy in any changes to our build infrastructure
#

rsync -a src/ cache

#
# Install a base system
#

initialize () {
	if [ -f cache/.stamp/initialize ] ; then
		return
	fi
	docker pull anchor.private/afcowie/debian:jessie
	docker pull anchor.private/afcowie/haskell:latest
	touch cache/.stamp/initialize
}


baseline () {
	if [ cache/.stamp/baseline -nt cache/.stamp/initialize ] ; then
		return
	fi
	docker run -t -v ${PWD}/cache:/src:rw anchor.private/afcowie/haskell /src/.build/baseline
	ID=`docker ps -q -l`
	docker commit ${ID} anchor.private/engineering/vaultaire:baseline
	docker rm ${ID}
	touch cache/.stamp/baseline
}


#
# Update (or initally clone) source code and build dependencies in volume
#

dependencies () {
	if [ cache/.stamp/dependencies -nt cache/.stamp/baseline ] ; then
		return
	fi
	docker run -t -v ${PWD}/cache:/src:rw anchor.private/engineering/vaultaire:baseline /src/.build/dependencies
	ID=`docker ps -q -l`
	docker commit ${ID} anchor.private/engineering/vaultaire:dependencies
	docker rm ${ID}
	touch cache/.stamp/dependencies
}

#
# Extract the binary artifacts
#

release () {
	if [ cache/.stamp/release -nt cache/.stamp/dependenices ] ; then
		return
	fi
	docker run -t -v ${PWD}/cache:/src:ro anchor.private/afcowie/debian:jessie /src/.build/release
	ID=`docker ps -q -l`
	docker commit ${ID} anchor.private/engineering/vaultaire:2.5.7
	docker rm ${ID}
	touch cache/.stamp/release
}

publish () {
	if [ cache/.stamp/publish -nt cache/.stamp/release ] ; then
		return
	fi
	docker tag anchor.private/engineering/vaultaire:2.5.7 anchor.private/engineering/vaultaire:latest
	docker push anchor.private/engineering/vaultaire:2.5.7
	docker push anchor.private/engineering/vaultaire:latest
	touch cache/.stamp/publish
}

initialize
baseline
dependencies
release
publish
